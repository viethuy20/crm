<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="AddError" xml:space="preserve">
    <value>Add error</value>
  </data>
  <data name="AddNew" xml:space="preserve">
    <value>Add New</value>
  </data>
  <data name="AddNewRole" xml:space="preserve">
    <value>Add New Role</value>
  </data>
  <data name="AddSuccessful" xml:space="preserve">
    <value>Add successful</value>
  </data>
  <data name="ButtonBackToList" xml:space="preserve">
    <value>Back To List</value>
  </data>
  <data name="Code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="CodeExists" xml:space="preserve">
    <value>Code exists</value>
  </data>
  <data name="ConfirmApprove" xml:space="preserve">
    <value>Do you want to approve this data?</value>
  </data>
  <data name="ConfirmBlock" xml:space="preserve">
    <value>Do you want to block this data?</value>
  </data>
  <data name="ConfirmCancelRequest" xml:space="preserve">
    <value>Do you want to cancel requirement NCL this data?</value>
  </data>
  <data name="ConfirmCreate" xml:space="preserve">
    <value>Do you want to create this data?</value>
  </data>
  <data name="ConfirmDelete" xml:space="preserve">
    <value>Do you want to delete this data?</value>
  </data>
  <data name="ConfirmPasswordAndPasswordDoNotMatch" xml:space="preserve">
    <value>'Confirm Password' and 'Password' do not match</value>
  </data>
  <data name="ConfirmReActive" xml:space="preserve">
    <value>Do you want to re-active this user?</value>
  </data>
  <data name="ConfirmRequestNCL" xml:space="preserve">
    <value>Do you want to request this data to NCL?</value>
  </data>
  <data name="ConfirmSave" xml:space="preserve">
    <value>Do you want to save this data?</value>
  </data>
  <data name="ConfirmSubmit" xml:space="preserve">
    <value>Do you want to submit this data?</value>
  </data>
  <data name="ConfirmUnblock" xml:space="preserve">
    <value>Do you want to unblock this data?</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="CreateUser" xml:space="preserve">
    <value>Create User</value>
  </data>
  <data name="DataInvalid" xml:space="preserve">
    <value>Data invalid</value>
  </data>
  <data name="DeleteFailed" xml:space="preserve">
    <value>Delete failed</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Detail" xml:space="preserve">
    <value>Detail</value>
  </data>
  <data name="EditRole" xml:space="preserve">
    <value>Edit Role</value>
  </data>
  <data name="EditUser" xml:space="preserve">
    <value>Edit User</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EmailExists" xml:space="preserve">
    <value>Email exists</value>
  </data>
  <data name="EmailIsInvalid" xml:space="preserve">
    <value>Email is invalid</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorYourFileIsTooLarge" xml:space="preserve">
    <value>Your file is too large, please choose another photo or resize before uploading</value>
  </data>
  <data name="FormatInvalid" xml:space="preserve">
    <value>Format invalid</value>
  </data>
  <data name="PhoneNumberIsInvalid" xml:space="preserve">
    <value>Phone number is invalid (digit only)</value>
  </data>
  <data name="FaxNumberIsInvalid" xml:space="preserve">
    <value>Fax number is invalid (digit only)</value>
  </data>
  <data name="ImportFromExcel" xml:space="preserve">
    <value>Import From Excel</value>
  </data>
  <data name="InvalidEmailOrPassword" xml:space="preserve">
    <value>Invalid email or password</value>
  </data>
  <data name="Logviewer" xml:space="preserve">
    <value>Log viewer</value>
  </data>
  <data name="MenuManagement" xml:space="preserve">
    <value>Menu Management</value>
  </data>
  <data name="MyProfile" xml:space="preserve">
    <value>My Profile</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NameExists" xml:space="preserve">
    <value>Name exists</value>
  </data>
  <data name="PasswordMismatch" xml:space="preserve">
    <value>The password does not match</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="PleaseSelect" xml:space="preserve">
    <value>Please select</value>
  </data>
  <data name="ReActive" xml:space="preserve">
    <value>Re-active</value>
  </data>
  <data name="Reject" xml:space="preserve">
    <value>Reject</value>
  </data>
  <data name="Rights" xml:space="preserve">
    <value>Rights</value>
  </data>
  <data name="RoleLevel" xml:space="preserve">
    <value>Role Level</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="RolesManagement" xml:space="preserve">
    <value>Roles Management</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SaveError" xml:space="preserve">
    <value>Save error</value>
  </data>
  <data name="SaveFailed" xml:space="preserve">
    <value>Save failed</value>
  </data>
  <data name="SaveSuccessful" xml:space="preserve">
    <value>Save successful</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SNo" xml:space="preserve">
    <value>S/No</value>
  </data>
  <data name="Successful" xml:space="preserve">
    <value>Successfully</value>
  </data>
  <data name="Target" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="TheFieldIsInvalid" xml:space="preserve">
    <value>This field is invalid.</value>
  </data>
  <data name="TheFieldPasswordMustBeaMinimumLengthOf6" xml:space="preserve">
    <value>The password field must have a minimum length of 6</value>
  </data>
  <data name="TheFieldShouldNotBeEmpty" xml:space="preserve">
    <value>This field is required.</value>
  </data>
  <data name="TheOldPasswordDoNotMatch" xml:space="preserve">
    <value>The old password does not match</value>
  </data>
  <data name="UnableToReactiveUser" xml:space="preserve">
    <value>Unable to re-active user</value>
  </data>
  <data name="UpdateSuccessful" xml:space="preserve">
    <value>Update successful</value>
  </data>
  <data name="UserEmailActive" xml:space="preserve">
    <value>User email actived</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User name</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="UsersDeleted" xml:space="preserve">
    <value>Users deleted</value>
  </data>
  <data name="YourProfileHasBeenUpdated" xml:space="preserve">
    <value>Your profile has been updated</value>
  </data>
</root>