@using NS
@using PQT.Domain.Enum
@using Quartz.Util
@using Resources
@model PQT.Web.Models.CallingModel

<section>
    <div class="card card-underline" style="background: white; margin: auto; max-width: 900px; position: relative;">
        <div class="card-head">
            <header><b>Calling Form</b></header>
        </div><!--end .card-head -->
        @using (Ajax.BeginForm("CallingForm", "routeValues", new AjaxOptions { OnFailure = "onFailCalling", OnSuccess = "onSuccessCalling" }, new { @id = "CreateOrEditForm", @class = "form form-validate" }))
        {
            <div class="card-body" style="height: 150px; padding: 30px;">
                @Html.HiddenFor(m => m.LeadID)
                @Html.HiddenFor(m => m.EventID)

                <div class="col-sm-4">
                    <div class="row">
                        @if (Model.LeadID > 0)
                        {
                            @Html.HiddenFor(m => m.CompanyID)
                            <div class="row">
                                <div class="form-group">
                                    @Html.Bootstrap().TextBoxFor(m => m.CompanyName).Class("form-control").Disabled().ShowValidationMessage(true)
                                    @Html.Bootstrap().LabelFor(m => m.CompanyName).LabelText("COMPANY NAME")
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                <select class="form-control select2-list callingCompany" name="@Html.NameFor(m => m.CompanyID)">
                                    <option value=""></option>
                                    @foreach (var user in Model.Companies)
                                    {
                                        <option value="@user.ID" selected="@(Model.CompanyID == user.ID)" dialingcode="@(user.Country != null ? user.Country.DialingCode : "")">@user.CompanyName</option>
                                    }
                                </select>
                                <label>COMPANY NAME</label>
                                @Html.Bootstrap().ActionLinkButton("Company Resource", "CompanyResourceList").RouteValues(new { companyName = "" }).HtmlAttributes(new { @class = "btn btn-primary simple-ajax-popup-align-top hide btnLoadResource" })
                            </div>
                        }
                    </div>
                    <div class="row">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.GeneralLine).Class("form-control  input-phone").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.GeneralLine).LabelText("GENERAL LINE")
                        </div>
                    </div>
                </div>
                <div class="col-sm-4  text-center">
                    <div class="form-group">
                        <div class="row">
                            <div class="call-animation">
                                <i class="md md-phone-in-talk"></i>
                            </div>
                        </div>
                        <div class="row">
                            <div class="row text-center" style="margin-top: 20px; font-size: 26px;">
                                <span id="call-tick">00:00</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="row">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.ClientName).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.ClientName).LabelText("CLIENT NAME/ JOB TITLE")
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.DirectLine).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.DirectLine).LabelText("DIRECT LINE/ MOBILE NUMBER")
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @Html.HiddenFor(m => m.PhoneCall.StartTime, new { @class = "phoneCallStartTime" })
                @Html.HiddenFor(m => m.PhoneCall.LeadID)
                @Html.HiddenFor(m => m.TypeSubmit, new { @class = "typeSubmit" })
                <div class="row" style="margin-top: 30px;">
                    <div class="col-sm-2">
                        <div class="form-group">
                            @Html.Bootstrap().DropDownListFor(m => m.Salutation, Enumeration.GetAll<NameTitle>().ToSelectList(m => m.DisplayName, m => m.DisplayName)).OptionLabel("").Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.Salutation).LabelText("Salutation")
                        </div>
                    </div>
                    <div class="col-sm-5">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.FirstName).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.FirstName).LabelText("First Name")
                        </div>
                    </div>
                    <div class="col-sm-5">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.LastName).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.LastName).LabelText("Last Name")
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.BusinessPhone).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.BusinessPhone).LabelText("Business Phone")
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.MobilePhone).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.MobilePhone).LabelText("Mobile Phone")
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.WorkEmailAddress).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.WorkEmailAddress).LabelText("Work Email Address")
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.WorkEmailAddress1).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.WorkEmailAddress1).LabelText("Work Email Address1")
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.Bootstrap().TextBoxFor(m => m.PersonalEmailAddress).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.PersonalEmailAddress).LabelText("Personal Email Address")
                        </div>
                    </div>
                    <div class="col-sm-8">
                        <div class="form-group">
                            @Html.Bootstrap().TextAreaFor(m => m.PhoneCall.Remark).Class("form-control").ShowValidationMessage(true)
                            @Html.Bootstrap().LabelFor(m => m.PhoneCall.Remark).LabelText("HIGHLIGHTS").ShowRequiredStar(true)
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.DatePickerFor(m => m.PhoneCall.CallBackDate, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PhoneCall.CallBackDate)
                            @Html.Bootstrap().LabelFor(m => m.PhoneCall.CallBackDate).LabelText("CALL BACK DATE")
                        </div>
                    </div>
                </div>
            </div><!--end .card-body -->
            <div class="card-actionbar">
                <div class="card-actionbar-row">
                    <button type="button" class="btn btn-default pull-left" id="endcall_save"><i class="md md-call-end"></i> End Call & Save</button>
                    @if (Model.Lead == null || Model.Lead.LeadStatusRecord == LeadStatus.Initial || Model.Lead.LeadStatusRecord == LeadStatus.Reject)
                    {
                        <button type="button" class="btn btn-success" id="endcall_requestncl"><i class="md md-call-end"></i> End Call & Request To NCL</button>
                    }
                </div>
            </div>
        }
    </div><!--end .card -->
</section>
<text>
    <script>
        if (@Model.LeadID > 0){
            StartTick();
        }
    </script>
</text>

@Html.Script(
    @<script>

        function onFailCallSheet() {
            toastr.error('@Resource.SaveError');
        }
        function onSuccessCallSheet(data) {
            if (data.Code == 0) {
                if (data.Message)
                    toastr.error(data.Message);
                else
                    toastr.error('@Resource.SaveFailed');
            } else {
                if (data.Code == 1) {
                    toastr.success('@Resource.UpdateSuccessful');
                    $.magnificPopup.close();
                    fixedColumn = 0;
                    oTable.fnFilter('');
                }
                if (data) {
                    $(".leadcontent").html(data);


                    $('.mfp-container .date-picker,.mfp-container .datepicker').datepicker({
                        autoclose: true,
                        todayHighlight: true,
                        format: 'dd/mm/yyyy'
                    }).on('changeDate', function (ev) {
                        $(this).datepicker('hide');
                    });

                    $("form").removeData("validator");
                    $("form").removeData("unobtrusiveValidation");
                    $.validator.unobtrusive.parse("form");
                }

            }
        }
        $(document).on('click', '#leadsave_exist', function (e) {
            e.preventDefault();
            $(".typeSubmit").val("SaveExist");
            $(this).parents("form").submit();
        });
        $(document).on('click', '#leadsave_call', function (e) {
            e.preventDefault();
            $(".typeSubmit").val("SaveCall");
            $(this).parents("form").submit();
        });
    </script>)

@Html.Script(
    @<script>

        function onFailCalling() {
            toastr.error('@Resource.SaveError');
        }
        function onSuccessCalling(data) {
            if (data.Code == 0) {
                if (data.Message)
                    toastr.error(data.Message);
                else
                    toastr.error('@Resource.SaveFailed');
            } else {
                if (data.Code == 1) {
                    toastr.success('@Resource.UpdateSuccessful');
                    //$.magnificPopup.close();
                    if (data.TypeSubmit == "SaveRequestNCL") {
                        bootbox.confirm("@Resource.ConfirmRequestNCL", function (isOK) {
                            if (isOK) {
                                $.ajax({
                                    url: '@Url.Action("RequestAction")?id=' + data.LeadID + '&requestType=@LeadStatus.RequestNCL',
                                    type: 'POST',
                                    success: function(data) {
                                        window.history.back();
                                        if (data == "") {
                                            toastr.success("Request successful");
                                            fixedColumn = 0;
                                            //oTable.fnFilter('');
                                        } else {
                                            toastr.error(data);
                                            fixedColumn = 0;
                                            //oTable.fnFilter('');
                                        }
                                    },
                                    error: function() {
                                        toastr.error("Request failed");
                                        fixedColumn = 0;
                                        //oTable.fnFilter('');
                                    }
                                });
                            } else {
                                window.history.back();
                            }
                        });
                    } else {
                        window.history.back();
                        fixedColumn = 0;
                        //oTable.fnFilter('');
                    }
                }
                //if (data) {
                //    $(".leadcontent").html(data);
                //}

            }
        }
        $(document).on('click', '#endcall_save', function (e) {
            e.preventDefault();
            $(".typeSubmit").val("SaveExist");
            $(this).parents("form").submit();
        });
        $(document).on('click', '#endcall_book', function (e) {
            e.preventDefault();
            $(".typeSubmit").val("SaveBook");
            $(this).parents("form").submit();
        });
        $(document).on('click', '#endcall_requestncl', function (e) {
            e.preventDefault();
            $(".typeSubmit").val("SaveRequestNCL");
            $(this).parents("form").submit();
        });
    </script>)

@Html.Script(
    @<script>

        $(document).on('click', '#request_close', function (e) {
            e.preventDefault();
            $.magnificPopup.close();
        });

        $(document).on('click', '#request_submit', function (e) {
            e.preventDefault();
            var formdata = new FormData();
            formdata.append("id", $("#request_id").val());
            formdata.append("requestType", $("#request_Type").val());
            var getfile = $('#request-attachment')[0];
            if (getfile) {
                for (var i = 0; i < getfile.files.length; i++) {
                    if (getfile.files[i].name) {
                        formdata.append("AttachmentFile", getfile.files[i]);
                    }
                }
            }
            $("#dvLoading").show();
            $.ajax({
                url: '@Url.Action("RequestAction")',
                data: formdata,
                contentType: false,
                processData: false,
                async: false,
                type: 'POST',
                success: function (data) {
                    if (data == "") {
                        toastr.success("Submit successful");
                        $.magnificPopup.close();
                        oTable.fnFilter('');
                    } else {
                        toastr.error(data);
                    }
                },
                error: function () {
                    toastr.error("Submit failed");
                }
            });
        });

    </script>)

@Html.Script(
    @<script>
        function onFailRejectAction() {
            toastr.error('@Resource.SaveError');
        }
        function onSuccessRejectAction(data) {
            if (data == "") {
                toastr.success("Reject successful");
                $.magnificPopup.close();
                fixedColumn = 0;
                oTable.fnFilter('');
            } else {
                toastr.error(data);
            }
        }
    </script>)


@Html.Script(
    @<script>

        function onFailEdit() {
            toastr.error('@Resource.SaveError');
        }
        function onSuccessEdit(data) {
            if (data.Code == 0) {
                if (data.Message)
                    toastr.error(data.Message);
                else
                    toastr.error('@Resource.SaveFailed');
            } else {
                if (data.Code == 1) {
                    toastr.success('@Resource.UpdateSuccessful');
                    $.magnificPopup.close();
                    fixedColumn = 0;
                    oTable.fnFilter('');
                }
            }
        }
    </script>)

@Html.Script(
    @<script>
        function precisionRound(number, precision) {
            var factor = Math.pow(10, precision);
            return Math.round(number * factor) / factor;
        }

        var tickStarted = false;
        var startTime = new Date();
        function tickTime() {
            var seconds = precisionRound((new Date() - startTime) / 1000, 0);
            var m = Math.floor(seconds / 60);
            var s = seconds - m * 60;
            m = checkTime(m);
            s = checkTime(s);
            $('#call-tick').html(m + ":" + s);
            if ($('.callingCompany').val() != undefined) {
                var t = setTimeout(tickTime, 500);
            } else {
                tickStarted = false;
            }
        }
        function checkTime(i) {
            if (i < 10) { i = "0" + i };  // add zero in front of numbers < 10
            return i;
        }

        $(document).on('change', '.callingCompany',
            function () {
                if ($(this).val() != ""){
                    $(".btnLoadResource").attr('href', '/Lead/CompanyResourceList?companyID=' + $(this).val());
                    $(".btnLoadResource").click();
                }
                
            });
        function StartTick() {
            startTime = new Date();
            $('.phoneCallStartTime').val(moment(startTime).format("DD/MM/YYYY HH:mm:ss"));
            tickTime();
            tickStarted = true;
        }
    </script>
                    )

@Html.Script(

    @<script>
    $(document).on('click', '#crtable tbody tr', function() {
        $("@Html.JquerySelectorFor(m => m.ClientName)").val($(this).data("role"));
        $("@Html.JquerySelectorFor(m => m.DirectLine)").val($(this).data("mobilephone"));
        $("@Html.JquerySelectorFor(m => m.GeneralLine)").val($(this).data("businessphone"));
        $("@Html.JquerySelectorFor(m => m.Salutation)").select2('val',$(this).data("salutation"));
        $("@Html.JquerySelectorFor(m => m.FirstName)").val($(this).data("firstname"));
        $("@Html.JquerySelectorFor(m => m.LastName)").val($(this).data("lastname"));
        $("@Html.JquerySelectorFor(m => m.BusinessPhone)").val($(this).data("businessphone"));
        $("@Html.JquerySelectorFor(m => m.MobilePhone)").val($(this).data("mobilephone"));
        $("@Html.JquerySelectorFor(m => m.WorkEmailAddress)").val($(this).data("workemail"));
        $("@Html.JquerySelectorFor(m => m.PersonalEmailAddress)").val($(this).data("personalemail"));

        if ($("select.callingCompany").val() != "" && !tickStarted) {
            StartTick();
        }
        var dialingCode = $("select.callingCompany")[0].options[$("select.callingCompany")[0].selectedIndex].getAttribute("dialingCode")
        $('.input-phone').val(dialingCode);
    });
    </script>
    )