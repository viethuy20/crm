@using NS
@using PQT.Domain.Enum
@using Resources
@model PQT.Web.Models.CallingModel

@{
}
<div class="card card-underline" style="background: white; margin: auto; max-width: 900px; position: relative;">
    <div class="card-head">
        <header><b>Calling Form</b></header>
    </div><!--end .card-head -->

    @using (Ajax.BeginForm("CallingForm", "routeValues", new AjaxOptions { OnFailure = "onFailCalling", OnSuccess = "onSuccessCalling" }, new { @id = "CreateOrEditForm", @class = "form form-validate" }))
    {
        <div class="card-body" style="height: 150px; padding: 30px;">

            <div class="col-sm-4">
                <div class="row">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Lead.CompanyName).Class("form-control").Disabled().ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.Lead.CompanyName).LabelText("COMPANY NAME")
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Lead.GeneralLine).Class("form-control").Disabled().ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.Lead.GeneralLine).LabelText("GENERAL LINE")
                    </div>
                </div>
            </div>
            <div class="col-sm-4  text-center">
                <div class="form-group">
                    <div class="row">
                        <div class="call-animation">
                            <i class="md md-phone-in-talk"></i>
                        </div>
                    </div>
                    <div class="row">
                        <div class="row text-center" style="margin-top: 20px; font-size: 26px;">
                            <span id="call-tick">00:00</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="row">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Lead.ClientName).Class("form-control").Disabled().ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.Lead.ClientName).LabelText("CLIENT NAME/ JOB TITLE")
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Lead.DirectLine).Class("form-control").Disabled().ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.Lead.DirectLine).LabelText("DIRECT LINE/ MOBILE NUMBER")
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            @Html.HiddenFor(m => m.PhoneCall.StartTime)
            @Html.HiddenFor(m => m.PhoneCall.LeadID)
            @Html.HiddenFor(m => m.TypeSubmit, new { @class = "typeSubmit" })
            <div class="row" style="margin-top: 30px;">
                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.Bootstrap().DropDownListFor(m => m.Salutation, Enumeration.GetAll<NameTitle>().ToSelectList(m => m.DisplayName, m => m.DisplayName)).OptionLabel("").Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.Salutation).LabelText("Salutation")
                    </div>
                </div>
                <div class="col-sm-5">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.FirstName).Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.FirstName).LabelText("First Name")
                    </div>
                </div>
                <div class="col-sm-5">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.LastName).Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.LastName).LabelText("Last Name")
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.BusinessPhone).Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.BusinessPhone).LabelText("Business Phone")
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.MobilePhone).Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.MobilePhone).LabelText("Mobile Phone")
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.WorkEmailAddress).Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.WorkEmailAddress).LabelText("Work Email Address")
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.WorkEmailAddress1).Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.WorkEmailAddress1).LabelText("Work Email Address1")
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.PersonalEmailAddress).Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.PersonalEmailAddress).LabelText("Personal Email Address")
                    </div>
                </div>
                <div class="col-sm-8">
                    <div class="form-group">
                        @Html.Bootstrap().TextAreaFor(m => m.PhoneCall.Remark).Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.PhoneCall.Remark).LabelText("HIGHLIGHTS").ShowRequiredStar(true)
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.DatePickerFor(m => m.PhoneCall.CallBackDate, new {@class = "form-control"})
                        @Html.ValidationMessageFor(m => m.PhoneCall.CallBackDate)
                        @Html.Bootstrap().LabelFor(m => m.PhoneCall.CallBackDate).LabelText("CALL BACK DATE")
                    </div>
                </div>
            </div>
        </div><!--end .card-body -->
        <div class="card-actionbar">
            <div class="card-actionbar-row">
                <button type="button" class="btn btn-default pull-left" id="endcall_save"><i class="md md-call-end"></i> End Call & Save</button>
                @if (Model.Lead.LeadStatusRecord == LeadStatus.Initial || Model.Lead.LeadStatusRecord == LeadStatus.Reject)
                {
                    <button type="button" class="btn btn-success" id="endcall_requestncl"><i class="md md-call-end"></i> End Call & Request To NCL</button>
                }
            </div>
        </div>
    }
</div><!--end .card -->
<text>
    <script>
        function precisionRound(number, precision) {
            var factor = Math.pow(10, precision);
            return Math.round(number * factor) / factor;
        }
        var startTime = new Date();
        function tickTime() {
            var seconds = precisionRound((new Date() - startTime) / 1000, 0);
            var m = Math.floor(seconds / 60);
            var s = seconds - m * 60;
            m = checkTime(m);
            s = checkTime(s);
            $('#call-tick').html(m + ":" + s);
            var t = setTimeout(tickTime, 500);
        }
        function checkTime(i) {
            if (i < 10) { i = "0" + i };  // add zero in front of numbers < 10
            return i;
        }
        tickTime();
    </script>
</text>