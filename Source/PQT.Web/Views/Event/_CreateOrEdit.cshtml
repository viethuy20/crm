@using PQT.Domain.Enum
@using NS
@using PQT.Domain.Entities
@using Resources
@model PQT.Web.Models.EventModel

@Html.HiddenFor(m => m.Event.UserID)
@Html.HiddenFor(m => m.Event.VenueInfoID)
@Html.HiddenFor(m => m.Event.AccomodationInfoID)
@Html.HiddenFor(m => m.Event.DriverInfoID)
@Html.HiddenFor(m => m.Event.PhotographerInfoID)
@Html.HiddenFor(m => m.Event.LocalVisaAgentInfoID)
@Html.HiddenFor(m => m.Event.PostEventInfoID)
<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col-sm-3">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Event.EventCode).Class("form-control code").HtmlAttributes(new { required = "required", maxlength = "10" }).ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.EventCode).ShowRequiredStar(true)
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group ">
                    @Html.Bootstrap().DropDownListFor(m => m.Event.EventStatus, EnumerationHelper.ToSelectList<EventStatus>()).Class("form-control").HtmlAttributes(new { required = "required" }).ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.EventStatus).ShowRequiredStar(true)
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group ">
                    @Html.Bootstrap().DropDownListFor(m => m.Event.EventCategoryID, Model.EventCategories.ToSelectList(m => m.ID, m => m.Name)).OptionLabel("").Class("form-control").HtmlAttributes(new { required = "required" }).ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.EventCategoryID).LabelText("Event Category").ShowRequiredStar(true)
                </div>
            </div>
            <div class="col-sm-3" style="width:150px">
                <div class="form-group" style="padding-top: 20px;">
                    @Html.Bootstrap().TextBoxFor(m => m.Event.BackgroundColor).HtmlAttributes(new { @style = "color:#fff;background:" + Model.Event.BackgroundColor }).Class("form-control").Id("cp3").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.BackgroundColor).LabelText("Event Color")
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Event.EventName).Class("form-control text-capitalize").HtmlAttributes(new { required = "required" }).ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.EventName).ShowRequiredStar(true)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <div class="input-daterange input-group">
                        <div class="input-group-content">
                            @Html.DatePickerRangeFor(m => m.Event.StartDate, new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(m => m.Event.StartDate)
                            @Html.Bootstrap().LabelFor(m => m.Event.StartDate).LabelText("Event First Day").ShowRequiredStar(true)
                        </div>
                        <span class="input-group-addon">to</span>
                        <div class="input-group-content">
                            @Html.DatePickerRangeFor(m => m.Event.EndDate, new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(m => m.Event.EndDate)
                            @Html.Bootstrap().LabelFor(m => m.Event.EndDate).LabelText("Event Last Day").ShowRequiredStar(true)
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.DatePickerFor(m => m.Event.DateOfConfirmation, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Event.DateOfConfirmation)
                    @Html.Bootstrap().LabelFor(m => m.Event.DateOfConfirmation)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.DatePickerFor(m => m.Event.ClosingDate, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Event.ClosingDate)
                    @Html.Bootstrap().LabelFor(m => m.Event.ClosingDate).LabelText("Date of Closing Sales")
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.DatePickerFor(m => m.Event.DateOfOpen, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Event.DateOfOpen)
                    @Html.Bootstrap().LabelFor(m => m.Event.DateOfOpen).LabelText("Date Of Open (Cross Sell)")
                </div>
            </div>
            <div class="col-sm-12">
                <div class="col-sm-6">
                    <div class="form-group">
                        <select multiple class="form-control" name="@Html.NameFor(m=>m.GroupsSelected)">
                            @foreach (var com in Model.SalesGroups.OrderBy(m => m.GroupName))
                            {
                                <option value="@com.ID" selected="@(Model.GroupsSelected.Contains(com.ID))">@com.GroupName</option>
                            }
                        </select>
                        <label>Sales Group</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <select multiple class="form-control " name="@Html.NameFor(m=>m.UsersSelected)">
                            @foreach (var com in Model.Users.OrderBy(m => m.DisplayName))
                            {
                                <option value="@com.ID" selected="@(Model.UsersSelected.Contains(com.ID))">@com.DisplayName</option>
                            }
                        </select>
                        <label>Account Manager</label>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group ">
                    <input type="text" name="@Html.NameFor(m=>m.Event.PrimaryJobtitleKeywords)" placeholder="                     " value="@Model.Event.PrimaryJobtitleKeywords" data-role="tagsinput" />
                    @Html.ValidationMessageFor(m => m.Event.PrimaryJobtitleKeywords)
                    @Html.Bootstrap().LabelFor(m => m.Event.PrimaryJobtitleKeywords)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group ">
                    <input type="text" name="@Html.NameFor(m=>m.Event.SecondaryJobtitleKeywords)" placeholder="                     " value="@Model.Event.SecondaryJobtitleKeywords" data-role="tagsinput" />
                    @Html.ValidationMessageFor(m => m.Event.SecondaryJobtitleKeywords)
                    @Html.Bootstrap().LabelFor(m => m.Event.SecondaryJobtitleKeywords)
                </div>
            </div>
            @*<div class="col-sm-6">
                    <div class="form-group ">
                        @Html.Bootstrap().TextAreaFor(m => m.Event.HotelVenue).Rows(3).Class("form-control").ShowValidationMessage(true)
                        @Html.Bootstrap().LabelFor(m => m.Event.HotelVenue)
                    </div>
                </div>*@
            <div class="col-sm-12">
                <div class="form-group ">
                    @Html.Bootstrap().TextAreaFor(m => m.Event.Location).Rows(5).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.Location)
                </div>
            </div>
            <div class="col-sm-12">
                <div class="form-group ">
                    @Html.Bootstrap().TextAreaFor(m => m.Event.Summary).Rows(5).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.Summary).LabelText("Event Summary")
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Event.FinanceEmail).Class("form-control text-lowercase").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.FinanceEmail).LabelText("Finance")
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Event.OperationEmail).Class("form-control text-lowercase").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.OperationEmail).LabelText("Operation Office")
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Event.OperationOnsiteEmail).Class("form-control text-lowercase").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.OperationOnsiteEmail).LabelText("Operation Onsite")
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Event.ProductionEmail).Class("form-control text-lowercase").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.ProductionEmail).LabelText("Production")
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Event.SalesEmail).Class("form-control text-lowercase").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Event.SalesEmail).LabelText("Sales")
                </div>
            </div>
            <div class="col-sm-4">
                @Html.HiddenFor(m => m.Event.SalesBrochure)
                <div class="form-group ">
                    @if (!string.IsNullOrEmpty(Model.Event.SalesBrochure))
                    {
                        <a href="@FileUpload.GetImageUrl(FileUploadType.Event, Model.Event.SalesBrochure)" target="_blank">@Model.Event.SalesBrochure</a>
                    }
                    @Html.Bootstrap().FileFor(m => m.SalesBrochureFile).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.SalesBrochureFile).LabelText("Sales Brochure")
                </div>
            </div>
            <div class="col-sm-4">
                @Html.HiddenFor(m => m.Event.OperationBrochure)
                <div class="form-group ">
                    @if (!string.IsNullOrEmpty(Model.Event.OperationBrochure))
                    {
                        <a href="@FileUpload.GetImageUrl(FileUploadType.Event, Model.Event.OperationBrochure)" target="_blank">@Model.Event.OperationBrochure</a>
                    }
                    @Html.Bootstrap().FileFor(m => m.OperationBrochureFile).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.OperationBrochureFile).LabelText("Operation Brochure")
                </div>
            </div>
            <div class="col-sm-4">
                @Html.HiddenFor(m => m.Event.RegContract)
                <div class="form-group ">
                    @if (!string.IsNullOrEmpty(Model.Event.RegContract))
                    {
                        <a href="@FileUpload.GetImageUrl(FileUploadType.Event, Model.Event.RegContract)" target="_blank">@Model.Event.RegContract</a>
                    }
                    @Html.Bootstrap().FileFor(m => m.RegContractFile).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.RegContractFile).LabelText("Reg Contract")
                </div>
            </div>
        </div>
    </div>
</div>


<div class="card card-underline">
    <div class="card-head">
        <header>Event Sessions</header>
    </div>
    <div class="card-body text-default-light">
        <div class="row">
            <div class="form-group">
                <div class="col-sm-12" id="lines-table">
                    @Html.CollectionEditorFor(m => m.Event.EventSessions)
                </div>
                @Html.JqueryTemplateFor(m => m.Event.EventSessions, "sub-tmpl")
            </div>
        </div>
    </div><!--end .card-body -->
    <div class="card-actionbar">
        <div class="card-actionbar-row">
            <a class="btn btn-info pull-left" onclick="return sub.addNewModule();"><i class="md md-add"></i> Add Event Session</a>
        </div>
    </div>
</div>

<div class="section-body">
    <div class="row">
        <div class="col-lg-12">
            <h2 class="text-primary">Sales Rules</h2>
        </div><!--end .col -->
    </div><!--end .row -->
    <div class="card">
        <div class="card-body no-padding">
            @Html.Bootstrap().TextAreaFor(m => m.Event.SalesRules).Rows(6).Class("form-control summernote").ShowValidationMessage(true)
        </div><!--end .card-body -->
    </div><!--end .card -->
</div>

@Html.Script(
    @<script>

        var sub = {
            addNewModule: function () {
                this._addNew('#sub-tmpl');
                return false;
            },

            _addNew: function (templateID) {
                $(templateID).tmpl({ index: this._generateGuid() }).appendTo('#lines-table');

                $('.form-horizontal .form-control').each(function () {
                    $(this).after('<div class="form-control-line"></div>');
                });
                initDatepickerRange();
                initSelect2();
                ReValidateForm();
            },

            remove: function (sender) {
                $(sender).closest('.row').remove();
            },

            _generateGuid: function () {
                // Source: http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/105074#105074
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            }
        };


        $('.summernote').summernote({
            fontNames: ['Agency FB', 'Albertina', 'Antiqua', 'Architect', 'Arial', 'Arial Black', 'BankFuturistic', 'BankGothic', 'Blackletter', 'Blagovest', 'Calibri', 'Comic Sans MS', 'Courier', 'Courier New', 'Cursive', 'Decorative', 'Fantasy', 'Fraktur', 'Frosty', 'Garamond', 'Georgia', 'Helvetica', 'Impact', 'Microsoft Sans Serif', 'Minion', 'Modern', 'Monospace', 'Open Sans', 'Palatino', 'Perpetua', 'Roboto', 'Roman', 'Sans-serif', 'Serif', 'Script', 'Swiss', 'Tahoma', 'Times', 'Times New Roman', 'Tw Cen MT', 'Verdana'],
        });
    </script>)
