@model PQT.Web.Models.CompanyResourceModel
@using Resources
@{
    ViewBag.Title = "Company Resources";
}

<section>
    <div class="section-header">
        <h2 class="text-primary">@ViewBag.Title</h2>
    </div>
    <div class="form-group row">
        <div class="col-sm-6">
            @if (CurrentUser.HasPermission("CompanyResource", "CreateOrEdit"))
            {
                @Html.Bootstrap().ActionLinkButton(Resource.AddNew, "CreateOrEdit").RouteValues(new { id = 0 }).PrependIcon("md md-add").HtmlAttributes(new { @class = "btn btn-primary simple-ajax-popup-align-top" })
            }


            @if (CurrentUser.HasPermission("CompanyResource", "ImportFromExcel"))
            {
                @Html.Bootstrap().ActionLinkButton(Resource.ImportFromExcel, "ImportFromExcel").PrependIcon("md md-cloud-upload").HtmlAttributes(new { @class = "btn btn-info " })
            }
        </div>
    </div>
    <div class="card">
        <div class="card-body">
        @using (Html.BeginForm("PrintExcel", "CompanyResource", null, FormMethod.Post, new {@class = "form no_loader"}))
        {
            <div class="row ">
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Country).HtmlAttributes(new {@class = "input-clear form-control"})
                        <label>Country</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Organisation).HtmlAttributes(new {@class = "input-clear form-control"})
                        <label>Company</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Name).HtmlAttributes(new {@class = "input-clear form-control"})
                        <label>Name</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Mobile).HtmlAttributes(new {@class = "input-clear form-control"})
                        <label>Mobile</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Email).HtmlAttributes(new {@class = "input-clear form-control"})
                        <label>Email</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Bootstrap().TextBoxFor(m => m.Role).HtmlAttributes(new {@class = "input-clear form-control"})
                        <label>Job Title</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-offset-4">
                    @Html.Bootstrap().Button().Text("Clear").Id("btnClear").PrependIcon("md md-close").Size(ButtonSize.Mini).HtmlAttributes(new {@class = "btn btn-default"})
                    @Html.Bootstrap().Button().Text("Search").Id("btnSearch").PrependIcon("md md-search").Size(ButtonSize.Mini).HtmlAttributes(new {@class = "btn btn-primary"})
                    @if (CurrentUser.HasPermission("CompanyResource", "PrintExcel"))
                    {
                        @Html.Bootstrap().SubmitButton().Text("Print").PrependIcon("md md-print").Size(ButtonSize.Mini).HtmlAttributes(new {@class = "btn btn-info"})
                    }
                </div>
            </div>
        }
            <div class="table-responsive">
                <table class="table" id="table">
                    <thead>
                    <tr>
                        <th>Country</th>
                        <th>Title</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Company</th>
                        <th>Job Title</th>
                        <th>Direct Line</th>
                        <th>Mobile Phone1</th>
                        <th>Mobile Phone2</th>
                        <th>Mobile Phone3</th>
                        <th>Work Email</th>
                        <th>Personal Email</th>
                        <th></th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</section>


@Html.Script(
    @<script>

        var fixedColumn = 0;
        var $Table = $("#table");
        $Table.dataTable({
            "processing": true, // for show progress bar
            "serverSide": true, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": false, // for disable multiple column at once
            "stateSave": false,
            "ajax": {
                "url": "@Url.Action("AjaxGetAlls")",
                "type": "POST",
                "datatype": "json",
                "data": function (d) {
                    d.Country = $('@Html.JquerySelectorFor(m=>m.Country)').val();
                    d.Organisation = $('@Html.JquerySelectorFor(m => m.Organisation)').val();
                    d.Name = $('@Html.JquerySelectorFor(m => m.Name)').val();
                    d.Mobile = $('@Html.JquerySelectorFor(m => m.Mobile)').val();
                    d.Email = $('@Html.JquerySelectorFor(m => m.Email)').val();
                    d.Role = $('@Html.JquerySelectorFor(m => m.Role)').val();
                }
            },
            "columns": [
                { "data": "Country", "name": "Country", "orderable": true },
                { "data": "Salutation", "name": "Salutation", "orderable": true },
                { "data": "FirstName", "name": "FirstName", "orderable": true },
                { "data": "LastName", "name": "LastName", "orderable": true },
                { "data": "Organisation", "name": "Organisation", "orderable": true },
                { "data": "Role", "name": "Role", "orderable": true },
                { "data": "DirectLine", "name": "DirectLine", "orderable": true },
                { "data": "MobilePhone1", "name": "MobilePhone1", "orderable": true },
                { "data": "MobilePhone2", "name": "MobilePhone2", "orderable": true },
                { "data": "MobilePhone3", "name": "MobilePhone3", "orderable": true },
                { "data": "WorkEmail", "name": "WorkEmail", "orderable": true },
                { "data": "PersonalEmail", "name": "PersonalEmail", "orderable": true },
                { "data": "ID", "name": "ID", "orderable": false },
            ],
            "aLengthMenu": [[25, 50, 100, 500, 1000, 2000], [25, 50, 100, 500, 1000, 2000]],
            "iDisplayLength": 50,
            "aaSorting": [[4, "asc"]],
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                $(nRow).attr("data-id", aData["ID"]);
                $(nRow).find('td:eq(12)').html('<a href="@Url.Action("CreateOrEdit")?id=' + aData["ID"] + '" data-action="edit" class="simple-ajax-popup-align-top"><i class="md md-edit text-info"></i></a> ' +
                    '<a href="#" data-action="delete" data-id="' + aData["ID"] + '"><i class="md md-delete text-danger"></i></a>');
            },
            initComplete: function () {
                var _table = this;
                _table.parent().find('input[type="search"]').unbind();
                var timeOutTyping;
                _table.parent().find('input[type="search"]').bind('keyup', function (e) {
                    clearTimeout(timeOutTyping);
                    timeOutTyping = setTimeout(function () {
                        fixedColumn = 0;
                        _table.fnFilter(_table.parent().find('input[type="search"]').eq(0).val());
                    }, 600);
                });
            },
            scrollY: false,
            scrollX: true,
            "bScrollCollapse": false,
            "drawCallback": function (settings, json) {
                FixedTable();
            },
        });
        function FixedTable() {
            if (fixedColumn < 3) {
                fixedColumn ++;
                var fixColumn = new $.fn.dataTable.FixedColumns($Table, {
                    leftColumns: 5,
                    sHeightMatch: "auto",
                    rightColumns: 1
                });
                var $leftWrappers = $(".DTFC_ScrollWrapper").find(".DTFC_LeftWrapper");
                if ($leftWrappers.length > 1) {
                    $leftWrappers[1].parentNode.removeChild($leftWrappers[1]);
                }
                var $rightWrappers = $(".DTFC_ScrollWrapper").find(".DTFC_RightWrapper");
                if ($rightWrappers.length > 1) {
                    $rightWrappers[1].parentNode.removeChild($rightWrappers[1]);
                }
            }
        }
        $(document).on("click", ".paginate_button", function () {
            fixedColumn = 0;
        });
        $(document).on("change", "select[name=table_length]", function () {
            fixedColumn = 0;
        });
        $Table.on('click', '[data-action="delete"]', function (e) {
            e.preventDefault();
            var selftr = $(this);
            bootbox.confirm("@Resource.ConfirmDelete", function (isOK) {
                if (isOK) {
                    $.ajax({
                        url: '@Url.Action("Delete")/' + selftr.data('id'),
                        type: 'POST',
                        success: function (data) {
                            if (data == true) {
                                $Table.fnDeleteRow(selftr.closest('tr')[0]);
                            } else {
                                bootbox.alert("@Resource.DeleteFailed");
                            }
                        },
                        error: function () {
                            bootbox.alert("@Resource.DeleteFailed");
                        }
                    });
                }
            });
        });
        
        $('#btnSearch').click(function () {
            fixedColumn = 0;
            $Table.fnFilter('');
        });

        $('#btnClear').click(function () {
            fixedColumn = 0;
            $(".input-clear ").val('');
            $Table.fnFilter('');
        });
        function onFail() {
            $(".error").removeClass('hide');
            $(".success").addClass('hide');
            $(".texterror").text("@Resource.Error");
        }
        function onSuccess(data) {
            $(".error").addClass('hide');
            $(".success").addClass('hide');

            if (data.Code == 1 || data.Code == 3) {
                $(".success").removeClass('hide');
                if (data.Code == 1) {
                    $(".textsuccess").text('@Resource.AddSuccessful');
                    addNewLineItem(data.Model);
                    $("#CreateOrEditForm").get(0).reset();;
                }
                if (data.Code == 3) {
                    $("textsuccess").data('@Resource.SaveSuccessful');
                    updateItem(data.Model);
                }
            } else {
                if (data.Code == 2)
                    $(".texterror").text('@Resource.AddError');
                if (data.Code == 4)
                    $(".texterror").text('@Resource.SaveError');
                if (data.Code == 5)
                    $(".texterror").text("@Resource.DataInvalid");
                if (data.Code == 6)
                    $(".texterror").text(data.error);
                $(".error").removeClass('hide');
            }
        }

        function addNewLineItem(data) {
            var rowIndex = $Table.fnAddData([
                data.Country,
                data.Salutation,
                data.FirstName,
                data.LastName,
                data.Organisation,
                data.Role,
                data.DirectLine,
                data.MobilePhone1,
                data.MobilePhone2,
                data.MobilePhone3,
                data.WorkEmail,
                data.PersonalEmail,
                data.BusinessUnit,
                data.BudgetMonthStr,
                '<a class="simple-ajax-popup-align-top" data-action="edit" href="@Url.Action("CreateOrEdit")?id=' + data.ID + '"><i class="md md-edit text-info"></i></a>' +
                '<a data-action="delete" data-id="' + data.ID + '" href="#"><i class="md md-delete text-danger"></i></a>'
            ]);
            var row = $Table.fnGetNodes(rowIndex);
            $(row).attr('data-id', data.ID);
        }
        function updateItem(data) {
            var tr = $($Table.fnGetNodes());
            tr.each(function (index, item) {
                if ($(item).data('id') == data.ID) {
                    var td = $(item).find("td");
                    if (td.length > 0) {
                        $(td[0]).text(data.Country);
                        $(td[1]).text(data.Salutation);
                        $(td[2]).text(data.FirstName);
                        $(td[3]).text(data.LastName);
                        $(td[4]).text(data.Organisation);
                        $(td[5]).text(data.Role);
                        $(td[6]).text(data.DirectLine);
                        $(td[7]).text(data.MobilePhone1);
                        $(td[8]).text(data.MobilePhone2);
                        $(td[9]).text(data.MobilePhone3);
                        $(td[10]).text(data.WorkEmail);
                        $(td[11]).text(data.PersonalEmail);
                        $(td[12]).text(data.BusinessUnit);
                        $(td[13]).text(data.BudgetMonthStr);
                    }
                }
            });
        }
</script>)
