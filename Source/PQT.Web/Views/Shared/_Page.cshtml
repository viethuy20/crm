@using System.Configuration
@using System.Security.Policy
@using System.Threading
@using PQT.Domain.Entities
@using PQT.Domain.Enum
@using Resources
@{
    var currentUser = CurrentUser.Identity;
    Layout = "~/Views/Shared/_BigBang.cshtml";

    var count = 0;
    if (currentUser != null)
    {
        count = currentUser.NotifyNumber;
    }
    var menus = MenuHelper.GetAll();
    var debugMode = ConfigurationManager.AppSettings["TEST_MODE"];
    var appName = "Prime QT" + (!string.IsNullOrEmpty(debugMode) ? " - " + debugMode : "");
}
<link href='http://fonts.googleapis.com/css?family=Roboto:300italic,400italic,300,400,500,700,900' rel='stylesheet' type='text/css' />

<!-- BEGIN HEADER-->
<header id="header" style="@(menus.Any()?"": "left: 0px;")">
    <div class="headerbar">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="headerbar-left">
            <ul class="header-nav header-nav-options">
                <li class="header-nav-brand" style="@(menus.Any()?"": "display: inline-table;")">
                    <div class="brand-holder">
                        <a href="/">
                            <span class="text-lg text-bold text-primary">@appName</span>
                        </a>
                    </div>
                </li>
                <li>
                    <a class="btn btn-icon-toggle menubar-toggle" data-toggle="menubar" href="javascript:void(0);">
                        <i class="fa fa-bars"></i>
                    </a>
                </li>
            </ul>
        </div>
        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="headerbar-right">
            <ul class="header-nav header-nav-options">
                <li>
                    <a 
                       href="@Url.Action("SalesmanTemplates","UploadTemplate")" title="Templates" class="btn btn-icon-toggle btn-default simple-ajax-popup-align-top">
                        <i class="fa fa-files-o"></i>
                    </a>
                </li>
                <li>
                    <a href="#offcanvas-notify" data-toggle="offcanvas" title="Notifications" class="btn btn-icon-toggle btn-default" id="notify-trigger">
                        <i class="fa fa-bell"></i><sup class="badge style-danger count @(count == 0? "hide":"")">@(count)</sup>
                    </a>
                </li>
                

                @*<li>
                        <!-- Search form -->
                        <form class="navbar-search" role="search">
                            <div class="form-group">
                                <input type="text" class="form-control" name="headerSearch" placeholder="Enter your keyword">
                            </div>
                            <button type="submit" class="btn btn-icon-toggle ink-reaction"><i class="fa fa-search"></i></button>
                        </form>
                    </li>*@
            </ul><!--end .header-nav-options -->

            <ul class="header-nav header-nav-profile">
                <li class="dropdown">
                    <a href="javascript:void(0);" class="dropdown-toggle ink-reaction" data-toggle="dropdown">
                        <img src="@(currentUser!=null?currentUser.AvatarUrl:"~/Content/img/profile.png")" alt="" />
                        <span class="profile-info">
                            @(currentUser != null ? currentUser.DisplayName : "")
                            @*<small>@(currentUser != null ? string.Join(",", currentUser.Roles.Select(m=>m.Name)) : "")</small>*@
                        </span>
                    </a>
                    <ul class="dropdown-menu animation-dock">
                        <li><a href="@Url.Action("Profile","Account")">My profile</a></li>
                        <li class="divider"></li>
                        <li><a href="@Url.Action("Logout","Account")"><i class="fa fa-fw fa-power-off text-danger"></i> Logout</a></li>
                    </ul><!--end .dropdown-menu -->
                </li><!--end .dropdown -->
            </ul><!--end .header-nav-profile -->
        </div><!--end #header-navbar-collapse -->
    </div>
</header>
<!-- END HEADER-->
<!-- BEGIN BASE-->
<div id="base" style="@(menus.Any()?"": "padding-left: 0px;")">

    <!-- BEGIN OFFCANVAS LEFT -->
    <div class="offcanvas">
    </div><!--end .offcanvas-->
    <!-- END OFFCANVAS LEFT -->
    <!-- BEGIN CONTENT-->
    <div id="content">
        <div id="temp_data_message_top">
            @if (TempData["message"] != null && !string.IsNullOrEmpty(TempData["message"].ToString()))
            {
                <div class="alert alert-success">
                    @Html.Raw(TempData["message"])
                </div>
            }
            @if (TempData["error"] != null && !string.IsNullOrEmpty(TempData["error"].ToString()))
            {
                <div class="alert alert-danger">
                    @Html.Raw(TempData["error"])
                </div>
            }
        </div>
        @RenderBody()
    </div><!--end #content-->
    <!-- END CONTENT -->
    <!-- BEGIN MENUBAR-->

    <div id="menubar" class="menubar-inverse @(menus.Any()?"":"hide") ">
        <div class="menubar-fixed-panel">
            <div>
                <a class="btn btn-icon-toggle btn-default menubar-toggle" id="left-menubar-toggle" data-toggle="menubar" href="javascript:void(0);">
                    <i class="fa fa-bars"></i>
                </a>
            </div>
            <div class="expanded">
                <a href="/">
                    <span class="text-lg text-bold text-primary ">@appName</span>
                </a>
            </div>
        </div>
        <div class="menubar-scroll-panel">
            <!-- BEGIN MAIN MENU -->
            <ul id="main-menu" class="gui-controls">

                <!-- BEGIN DASHBOARD -->
                <li>
                    <a href="/" class="@(ViewContext.RouteData.Values["controller"].ToString()=="Home"?"active":"")">
                        <div class="gui-icon"><i class="md md-home"></i></div>
                        <span class="title">Dashboard</span>
                    </a>
                </li><!--end /menu-li -->
                <!-- END DASHBOARD -->

                @foreach (var item in menus)
                {

                    var children = MenuHelper.GetAll(item.ID).ToList();
                    var title = item.Title;
                    if (item.Title.ToUpper() == "MASTER FILES")
                    {
                        children = children.OrderBy(m => m.Title).ToList();
                    }
                    <li class="@(children.Any()?"gui-folder":"")">
                        @if (string.IsNullOrEmpty(item.Url))
                        {
                            <a>
                                <div class="gui-icon"><span class="@(string.IsNullOrEmpty(item.Icon) ? "fa fa-cube" : item.Icon)"></span></div>
                                <span class="title">@title</span>
                            </a>
                            <ul>
                                @{
                                    foreach (var childItem in children)
                                    {
                                        var childTitle = childItem.Title;
                                        if (childItem.Url != null &&
                                            (childItem.Url.Remove(0, 1) == ViewContext.RouteData.Values["controller"].ToString() ||
                                             childItem.Url.Remove(0, 1) == ViewContext.RouteData.Values["controller"].ToString()
                                             + "/" + ViewContext.RouteData.Values["action"].ToString()))
                                        {

                                            <li><a class="active" href="@childItem.Url"><span class="title">@childTitle</span></a></li>
                                        }
                                        else
                                        {
                                            <li><a href="@childItem.Url"><span class="title">@childTitle</span></a></li>
                                        }
                                    }
                                }
                            </ul>
                                    }
                                    else
                                    {
                                        if (item.Url != null && (item.Url.Remove(0, 1) == ViewContext.RouteData.Values["controller"].ToString() ||
                                                                 item.Url.Remove(0, 1) == ViewContext.RouteData.Values["controller"].ToString()
                                                                 + "/" + ViewContext.RouteData.Values["action"].ToString()))
                                        {
                                            <a href="@item.Url" class="active">
                                                <div class="gui-icon"><span class="@(string.IsNullOrEmpty(item.Icon) ? "fa fa-cube" : item.Icon)"></span></div>
                                                <span class="title">@title</span>
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="@item.Url">
                                                <div class="gui-icon"><span class="@(string.IsNullOrEmpty(item.Icon) ? "fa fa-cube" : item.Icon)"></span></div>
                                                <span class="title">@title</span>
                                            </a>
                                        }
                                    }
                    </li>
                                    }


            </ul><!--end .main-menu -->
            <!-- END MAIN MENU -->

            <div class="menubar-foot-panel">
                <small class="no-linebreak hidden-folded">
                    <span class="opacity-75">Copyright &copy; @DateTime.Today.Year</span> <strong>pri-qua</strong>
                </small>
            </div>
        </div><!--end .menubar-scroll-panel-->

    </div><!--end #menubar-->
    <!-- END MENUBAR -->



    @Html.Action("PanelNotification", "Home")
</div><!--end #base-->
<!-- END BASE -->
@section css
{
    @Styles.Render("~/content/css/min")
    @RenderSection("css", required: false)
}


@section js
{

    @Scripts.Render("~/content/js/min")


    <script src="~/signalr/hubs"></script>


    <script>

        var company_id_selected_val = 0;

        $('.prepend-icon').prepend("<i class='icon-list'></i>");


        $("select[data-display=select2]").select2({
            placeholder: "@Resource.PleaseSelect",
            width: '100%',
            allowClear: true,
        });

        function initDatepicker() {
            $('.date-picker, .datepicker').datepicker({
                autoclose: true,
                todayHighlight: true,
                format: 'dd/mm/yyyy'
            }).on('changeDate',
                function(ev) {
                    $(this).datepicker('hide');
                });
        }

        function initDatepickerRange() {
            $('.input-daterange').datepicker({
                autoclose: true,
                todayHighlight: true,
                format: 'dd/mm/yyyy'
            }).on('changeDate',
                function (ev) {
                    $(this).datepicker('hide');
                });
        }

        initDatepicker();
        initDatepickerRange();

        $('.monthTime').datepicker({
            autoclose: true,
            todayHighlight: true,
            format: "mm/yyyy",
            viewMode: "months",
            minViewMode: "months"
        }).on('changeDate',
            function(ev) {
                $(this).datepicker('hide');
            });

        function initSelect2() {
            $('select:not(.select-ajax)').select2({
                placeholder: "@Resource.PleaseSelect",
                allowClear: true,
                width: '100%',
            });
        }

        initSelect2();
        ReValidateForm();

        function ReValidateForm() {
            $("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");
        }

        function repoFormatResult(repo) {
            if (repo.loading) return repo.text;
            var markup = String.format("<div class='select2-result-repository clearfix'>{0}</div>", repo.text);

            return markup;
        }

        function repoFormatSelection(repo) {
            return repo.text;
        }


        function initAjaxDropdown(element, url, placeholder, multiple) {
            element.select2({
                placeholder: placeholder,
                minimumInputLength: 3,
                multiple: multiple,
                allowClear: true,
                ajax: {
                    // instead of writing the function to execute the request we use Select2's convenient helper
                    url: url,
                    dataType: 'json',
                    delay: 250,
                    data: function(params) {
                        return {
                            q: params.term // search term
                        };
                    },
                    processResults: function(data, page) { // parse the results into the format expected by Select2.
                        // since we are using custom formatting functions we do not need to alter the remote JSON data
                        return { results: data };
                    },
                    cache: true,
                    params: {
                        global: false
                    }
                },
                templateResult: repoFormatResult, // omitted for brevity, see the source of this page
                templateSelection: repoFormatSelection, // omitted for brevity, see the source of this page
                dropdownCssClass: "bigdrop", // apply css that makes the dropdown taller
                escapeMarkup:
                    function(m) {
                        return m;
                    }, // we do not want to escape markup since we are displaying html in results
                width: '100%'
            });
        }

        /////////////////////////
        $(".toggle-search").on('click',
            function(e) {
                if ($('.search-icon').hasClass('fa-angle-down'))
                    $('.search-icon').removeClass('fa-angle-down').addClass('fa-angle-up');
                else
                    $('.search-icon').removeClass('fa-angle-up').addClass('fa-angle-down');
                e.preventDefault();
                $("#table-Search").slideToggle();
            });
        /////////////////////////////////
        $(".cd-side-nav li.has-children").on('click',
            function(e) {
                //if ($(e.target).attr('href') !== '#')
                //    return;
                if ($($(this).find("a")).attr('href') !== '#') {
                    location.href = $($(this).find("a")).attr('href');
                } else if ($(this).hasClass('active')) {

                } else {
                    $('.has-children').removeClass('active');
                    $(this).addClass('active');
                }
            });


        $(document).on('change',
            '.cbx-sign',
            function() {
                if ($(this).is(':checked')) {
                    $(this).val(true);
                } else {
                    $(this).val(false);
                }
            });


        $(document).ajaxStart(function() {
            $("#dvLoading").show();
        });

        $(document).ajaxStop(function() {
            $("#dvLoading").hide();
        });

        $(document).ready(function() {
            $(document).ajaxError(function(e, xhr, settings) {
                $("#dvLoading").hide();
                if (xhr.status == 403) {
                    window.location.href = e.currentTarget.URL;
                }
            });
        });


        $(document).on('click',
            'input[type=submit],a',
            function(e) {
                $("#temp_data_message_top").html("");
            });

        $('#accordion-menu').collapse({
            toggle: true
        });

        $("#left-menubar-toggle").on("click",
            function() {
                var $body = $("body");
                if ($body.hasClass("menubar-pin")) {
                    createCookie("menubar-pin", "false", 3650);
                } else {
                    createCookie("menubar-pin", "true", 3650);
                }

            });

        var createCookie = function(name, value, days) {
            var expires;
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toGMTString();
            } else {
                expires = "";
            }
            document.cookie = name + "=" + value + expires + "; path=/";
        }

        function getCookie(c_name) {
            if (document.cookie.length > 0) {
                var c_start = document.cookie.indexOf(c_name + "=");
                if (c_start != -1) {
                    c_start = c_start + c_name.length + 1;
                    var c_end = document.cookie.indexOf(";", c_start);
                    if (c_end == -1) {
                        c_end = document.cookie.length;
                    }
                    return unescape(document.cookie.substring(c_start, c_end));
                }
            }
            return "";
        }


    </script>

    <script>
        function StartConnectProgressHub() {
            var progressNotifier = $.connection.progressHub;
            progressNotifier.client.sendMessage = function (message) {
                UpdateProgress(message);
            };
        }
        function UpdateProgress(message) {
            var data = JSON.parse(message);
            if (data) {
                if (data.totalCount > 1 && data.count < data.totalCount) {
                    $("#dvLoading_progress").removeClass("hide");
                    $("#progress_count").text(data.count);
                    $("#progress_total_count").text(data.totalCount);
                } else {
                    $("#dvLoading_progress").addClass("hide");
                    $("#progress_count").text("0");
                    $("#progress_total_count").text("0");
                }
            }
        }
    </script>

    <script>
        ///////////////////////////////////////////////////////////////////////////
// notification
///////////////////////////////////////////////////////////////////////////

        var notificator = $.connection.notificationHub,
            $triggerNotify = $('#notify-trigger'),
            $notifyCounter = $triggerNotify.find('.count'),
            $notifyFlyerContent = $('.notify-trigger-no-content'),
            documentTitle = document.title;

        notificator.client.notify = function (dataJson, dataType) {
            try {
                var data = eval('(' + dataJson + ')');
                new window[dataType](data).notify();
            } catch (e) {
            }
        };

        var timeOut = null;

        var UserNotification = (function() {

            function UserNotification(data) {
                this.notifyData = data;
            }

            UserNotification.prototype.notify = function() {
                this.notifyRequest();
                var notifyCount = parseInt($notifyCounter.text()) + 1;
                $notifyCounter.html(notifyCount);
                $notifyCounter.removeClass('hide');
                documentTitle = documentTitle.substring(documentTitle.lastIndexOf(")") + 1, documentTitle.length);
                document.title = '(' + notifyCount + ') ' + documentTitle;
                //toastr.info(this.notifyData.Description, this.notifyData.Title);
                var $eventIdNCList = $("#eventIdNCList");
                if (tableLead && $eventIdNCList && $eventIdNCList.val() == this.notifyData.EventId) {
                    fixedColumn = false;
                    tableLead.fnDraw();
                    try {
                        LoadTotalNCLSummary();
                    } catch (e) {
                    }
                }
            };

            UserNotification.prototype.notifyRequest = function() {
                if ($notifyFlyerContent) {
                    var urlNotify = '@Url.Action("Detail", "Lead")?id=' +
                        this.notifyData.EntryId + '&eventId=' + this.notifyData.EventId;
                    if (this.notifyData.NotifyTypeCode == '@NotifyType.Booking.Value') {
                        urlNotify = '@Url.Action("Detail", "Booking")?id=' +
                            this.notifyData.EntryId + '&eventId=' + this.notifyData.EventId;
                    }else if (this.notifyData.NotifyTypeCode == '@NotifyType.Recruitment.Value') {
                        urlNotify = '@Url.Action("Detail", "Recruitment")?id=' +
                            this.notifyData.EntryId;
                    }else if (this.notifyData.NotifyTypeCode == '@NotifyType.OpeEvent.Value') {
                        urlNotify = '@Url.Action("OpeDetail", "Operation")?id=' +
                            this.notifyData.EntryId;
                    }
                    var row =
                        '<li class="tile" style="border-bottom: 1px solid rgba(150, 156, 156, 0.3);\
                        border-left: 4px solid ' +
                            this.notifyData.HighlightColor +
                            ';">\
                    <a class="tile-content ink-reaction" href="' + urlNotify + '">\
                    <div class="tile-text">\
                        <b>' +
                            this.notifyData.Description +
                            ' - ' +
                            this.notifyData.EventCode +
                            '</b>\
                        <br/>' +
                            this.notifyData.Title +
                            '\
                        <small class="timestamp" title="' +
                            this.notifyData.Timestamp +
                        '" data-time="' + this.notifyData.TimeToString +'">' +
                        moment(this.notifyData.TimeToString, "DDMMYYYYhhmmss").fromNow() +
                            '</small>\
                    </div>\
                    </a>\
                    </li>';
                    $(row).insertAfter($notifyFlyerContent);
                    var notifyFlyerPanel = $notifyFlyerContent.parents(".nano-content");
                    if (notifyFlyerPanel.length > 0) {
                        notifyFlyerPanel[0].scrollTop = 0;
                        notifyFlyerPanel.find(".notify_not_found").remove();
                    }
                    $notifyFlyerContent.addClass('hide');
//            $notifyFlyerContent.append(row);
                }

                var $dashboardNotify = $("#dashboard_notify_" + this.notifyData.EventId);
                if ($dashboardNotify) {
                    var urlNotify = '@Url.Action("Detail", "Lead")?id=' +
                        this.notifyData.EntryId + '&eventId=' + this.notifyData.EventId;
                    if (this.notifyData.NotifyTypeCode == '@NotifyType.Booking.Value') {
                        urlNotify = '@Url.Action("Detail", "Booking")?id=' +
                            this.notifyData.EntryId + '&eventId=' + this.notifyData.EventId;
                    }
                    var row = '<div class="notify_item dashboard_ncl_new" name="notify-' +
                        this.notifyData.ID + '">\
                    <a class="tile-content ink-reaction" href="'+ urlNotify +'" >\
                    <b>' +
                        this.notifyData.Description +
                        '</b> - ' +
                        this.notifyData.Title +
                        '\
                    <br/><span class="timestamp" title="' +
                        this.notifyData.Timestamp +
                        '" data-time="' + this.notifyData.TimeToString +'">' +
                        moment(this.notifyData.TimeToString, "DDMMYYYYhhmmss").fromNow() +
                        '</span>\
                    </a>\
                    </div>';
                    $(row).insertAfter($dashboardNotify);
                    var notifyPanel = $dashboardNotify.parents(".notify_panel");
                    if (notifyPanel.length > 0) {
                        notifyPanel[0].scrollTop = 0;
                        notifyPanel.find(".notify_not_found").remove();
                    }
                    clearTimeout(timeOut);
                    timeOut = setTimeout(function() {
                            $('.dashboard_ncl_new').removeClass("dashboard_ncl_new");
                        },
                        30000);
                }

                if (this.notifyData.NotifyTypeCode == '@NotifyType.Booking.Value' &&
                    location.href.toLowerCase().indexOf('booking/detail') > 1) {
                    location.reload();
                } else if (this.notifyData.NotifyTypeCode != '@NotifyType.Booking.Value' &&
                    location.href.toLowerCase().indexOf('lead/detail') > 1) {
                    location.reload();
                }else if (this.notifyData.NotifyTypeCode != '@NotifyType.Recruitment.Value' &&
                    location.href.toLowerCase().indexOf('recruitment/detail') > 1) {
                    location.reload();
                }
            };

            return UserNotification;

        })();


        var Lead = (function() {

            function Lead(data) {
                this.lead = data;
            }

            Lead.prototype.notify = function () {
                var $eventIdNCList = $("#eventIdNCList");
                try {
                    if ($nclTable) {
                        if ($eventIdNCList && $eventIdNCList.val() == this.lead.EventID) {
                            $nclTable.fnDraw();
                        }
                    }
                } catch (e) {
                }
                try {
                    if (tableLead) {
                        if ($eventIdNCList && $eventIdNCList.val() == this.lead.EventID) {
                            fixedColumn = 0;
                            tableLead.fnDraw();
                            LoadTotalNCLSummary();
                            LoadTotalBlocked();
                        }
                    }
                } catch (e) {
                }
            };

            return Lead;

        })();

        var Booking = (function() {

            function Booking(data) {
                this.booking = data;
            }

            Booking.prototype.notify = function () {
                var $eventIdNCList = $("#eventIdNCList");
                try {
                    if (bookingTable) {
                        bookingTable.fnDraw();
                    }
                } catch (e) {
                }
                try {
                    if (this.booking.ReloadTableLead && tableLead) {
                        if ($eventIdNCList && $eventIdNCList.val() == this.booking.EventID) {
                            fixedColumn = 0;
                            tableLead.fnDraw();
                            LoadTotalNCLSummary();
                        }
                    }
                } catch (e) {
                }
            };
            return Booking;
        })();

        $triggerNotify.on('click',
            function(e) {
                e.preventDefault();
                $notifyCounter.addClass('hide');
                $notifyCounter.html('0');
                document.title = documentTitle.substring(documentTitle.lastIndexOf(")") + 1, documentTitle.length);
                $.ajax({
                    global: false,
                    url: '@Url.Action("RemoveNotifyCounter", "Home")',
                    type: 'GET',
                    success: function(data) {
                    },
                    error: function() {
                    }
                });
            });


        function UpdateSeenNotify(entryId, type) {
            $.ajax({
                global: false,
                url: '@Url.Action("UpdateSeenNotify","Home")?entryId=' + entryId + '&type=' + type,
                type: 'GET',
                success: function (count) {
                    var currentNotifyCount = parseInt($notifyCounter.text());
                    if (count > 0 && currentNotifyCount > 0) {
                        currentNotifyCount = currentNotifyCount - count;
                        if (currentNotifyCount > 0) {
                            $notifyCounter.html(currentNotifyCount);
                            documentTitle = documentTitle.substring(documentTitle.lastIndexOf(")") + 1,
                                documentTitle.length);
                            document.title = '(' + currentNotifyCount + ') ' + documentTitle;
                        } else {
                            $notifyCounter.addClass('hide');
                            $notifyCounter.html('0');
                            document.title = documentTitle.substring(documentTitle.lastIndexOf(")") + 1, documentTitle.length);
                        }
                    }
                },
                error: function () {
                }
            });
        }

        hubConnectionId = "";
        $.connection.hub.start().done(function () {
            hubConnectionId = $.connection.hub.id;
        });
        $.connection.hub.qs = "UserID=@(currentUser!=null?currentUser.ID.ToString():"")";
        $.connection.hub.disconnected(function () {
            setTimeout(function () {
                $.connection.hub.start().done(function () {
                    hubConnectionId = $.connection.hub.id;
                });
            }, 5000); // Restart connection after 5 seconds.you can set the time based your requirement
        });
    </script>

    <script>
        //Update all .timestamp
        function UpdateTimestamp() {
            var $timestamp = $(".timestamp");
            $timestamp.each(function (index, item) {
                var time = $(item).data('time');
                if (time && time != "") {
                    $(item).html(moment(time, "DDMMYYYYhhmmss").fromNow());
                }
            });
            setTimeout(function () {
                UpdateTimestamp();
            }, 60000);
            //console.log("Update all .timestamp length=" + $timestamp.length);
        }
        setTimeout(function () {
            UpdateTimestamp();
        }, 60000);
    </script>


    @RenderSection("js", required: false)
}
