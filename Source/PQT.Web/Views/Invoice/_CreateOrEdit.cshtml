@using PQT.Domain.Enum
@using Resources
@model PQT.Web.Models.BookingModel
<style>
    .nowrap {
        white-space: nowrap;
    }

    #calltable tbody tr {
        cursor: pointer;
    }

        #calltable tbody tr:hover {
            background-color: #f2f2f2;
        }
</style>
<div class="card-body">
    <div class=" col-sm-12">
        <div class="card card-underline">
            <div class="card-head">
                <header>Sessions</header>
                @Html.ValidationMessageFor(m => m.Event.EventSessions)
            </div>
            <div class="card-body text-default-light">
                <div class="row">
                    <div class="col-sm-12">
                        @foreach (var session in Model.Event.EventSessions)
                        {
                            <div class="col-sm-4">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="checkbox checkbox-styled">
                                            <label>
                                                <input type="checkbox" value="@session.ID" @(Model.SessionIds.Contains(session.ID) ? "checked" : "") name="@Html.NameFor(m => m.SessionIds)">
                                                <span>@session.SessionTitle (@session.StartDate.ToString("dd MMM") - @session.EndDate.ToString("dd MMM"))</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12">
                                        @session.ShortDescription
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12">
                                        @session.Address
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class=" col-sm-6">
        <div class="card card-underline">
            <div class="card-head">
                <header>Company Info</header>
            </div>
            <div class="card-body text-default-light" style="padding-bottom: 50px;">
                <div class="form-group">
                    @Html.HiddenFor(m => m.Booking.ID)
                    @Html.HiddenFor(m => m.Booking.BookingStatusID)
                    @Html.HiddenFor(m => m.Booking.CompanyID)
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.Company.CompanyName).Class("form-control").Disabled().ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.CompanyID).LabelText("Company Name")
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.Address).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.Address)
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.Tel).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.Tel)
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.Fax).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.Fax)
                </div>
            </div>
        </div>
    </div>
    <div class=" col-sm-6">
        <div class="card card-underline">
            <div class="card-head">
                @*<div class="tools">
                        <div class="btn-group" style="margin-right: 15px;">
                            <a href="#" id="btn_sender" class="btn ink-reaction btn-floating-action btn-info " title="Select data"><i class="fa fa-list"></i></a>
                        </div>
                    </div>*@
                <header>Sender <span class="required">*</span></header>
            </div>
            <div class="card-body text-default-light" style="padding-bottom: 0px">
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.SenderName).Readonly().Class("form-control text-capitalize").HtmlAttributes(new { required = "required" }).ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.SenderName).ShowRequiredStar(true).LabelText("Sender")
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.SenderDestination).Readonly().Class("form-control text-capitalize").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.SenderDestination).LabelText("Destination")
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.SenderTel).Readonly().Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.SenderTel).LabelText("Tel")
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.SenderMail).Readonly().Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.SenderMail).LabelText("Mail")
                </div>
            </div>
            <div class="card-actionbar">
                <div class="card-actionbar-row">
                    @Html.Bootstrap().Button().Id("btn_sender").Text("Select Info").Class("pull-left").Style(ButtonStyle.Info).PrependIcon("md md-info")
                </div>
            </div>
        </div>
    </div>
    <div class=" col-sm-12">
        <div class="card card-underline">
            <div class="card-head">
                <header>Delegates <span class="required">*</span></header>
                @Html.ValidationMessageFor(m => m.Booking.Delegates)
            </div>
            <div class="card-body text-default-light" id="delegateContain">
                @Html.CollectionEditorFor(m => m.Booking.Delegates)
                @Html.JqueryTemplateFor(m => m.Booking.Delegates, "sub-tmpl")
            </div><!--end .card-body -->
            <div class="card-actionbar">
                <div class="card-actionbar-row">
                    <a class="btn btn-info pull-left" id="btn_add_delegate"><i class="md md-add"></i> Add Delegate</a>
                </div>
            </div>
        </div>
    </div>
    <div class=" col-sm-6">
        <div class="card card-underline">
            <div class="card-head">
                @*<div class="tools">
                        <div class="btn-group" style="margin-right: 15px;">
                            <a href="#" id="btn_authorisation" class="btn ink-reaction btn-floating-action btn-info" title="Select data"><i class="fa fa-list"></i></a>
                        </div>
                    </div>*@
                <header>Authorisation <span class="required">*</span></header>
            </div>
            <div class="card-body text-default-light" style="padding-bottom: 0px">
                <div class="form-group">
                    <div class="checkbox checkbox-styled">
                        <label>
                            <input type="checkbox" class="cbx-sign" id="@Html.IdFor(m => m.Booking.SameAsSender)" name="@Html.NameFor(m => m.Booking.SameAsSender)" value="@(Model.Booking.SameAsSender?"true":"false")" @(Model.Booking.SameAsSender ? "checked" : "")>
                            <span>Same as sender</span>
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.AuthoriserName).Readonly().Class("form-control text-capitalize").HtmlAttributes(new { required = "required" }).ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.AuthoriserName).ShowRequiredStar(true).LabelText("Authoriser")
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.AuthoriserDestination).Readonly().Class("form-control text-capitalize").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.AuthoriserDestination).LabelText("Destination")
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.AuthoriserTel).Readonly().Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.AuthoriserTel).LabelText("Tel")
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.AuthoriserMail).Readonly().Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.AuthoriserMail).LabelText("Mail")
                </div>
            </div>
            <div class="card-actionbar">
                <div class="card-actionbar-row">
                    @Html.Bootstrap().Button().Id("btn_authorisation").Text("Select Info").Class("pull-left").Style(ButtonStyle.Info).PrependIcon("md md-info")
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.HiddenFor(m => m.Booking.Attachment)
            @if (!string.IsNullOrEmpty(Model.Booking.Attachment))
            {
                @Html.Bootstrap().Link(Model.Booking.Attachment, FileUpload.GetImageUrl(FileUploadType.Booking, Model.Booking.Attachment)).Class("form-control").HtmlAttributes(new { target = "_blank" })
            }
            @Html.Bootstrap().FileFor(m => m.AttachmentFile).ShowValidationMessage(true).HtmlAttributes(new { @style = "margin-top: 15px", required = "required" })
            @Html.Bootstrap().LabelFor(m => m.Booking.Attachment).LabelText("Signed Reg Contract").ShowRequiredStar(true)
        </div>
    </div>
    <div class=" col-sm-6">
        <div class="card card-underline">
            <div class="card-head">
                <header>Price</header>
            </div>
            <div class="card-body text-default-light">
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.FeePerDelegate).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.FeePerDelegate)
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.DiscountPercent).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.DiscountPercent)
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.TotalWrittenRevenue).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.TotalWrittenRevenue)
                </div>
                <div class="form-group">
                    @if (CurrentUser.HasRole("Finance") || CurrentUser.HasRole("Admin") || CurrentUser.HasRole("Manager"))
                    {
                        @Html.Bootstrap().TextBoxFor(m => m.Booking.TotalPaidRevenue).Class("form-control").ShowValidationMessage(true)
                    }
                    else
                    {
                        @Html.Bootstrap().TextBoxFor(m => m.Booking.TotalPaidRevenue).Readonly().Class("form-control").ShowValidationMessage(true)
                    }
                    @Html.Bootstrap().LabelFor(m => m.Booking.TotalPaidRevenue)
                </div>
                <div class="form-group">
                    @if (CurrentUser.HasRole("Finance") || CurrentUser.HasRole("Admin") || CurrentUser.HasRole("Manager"))
                    {
                        @Html.Bootstrap().DropDownListFor(m => m.Booking.PaymentStatus, EnumerationHelper.ToSelectList<PaymentStatus>()).Class("form-control").ShowValidationMessage(true)

                    }
                    else
                    {
                        @Html.Bootstrap().TextBoxFor(m => m.Booking.PaymentStatusDisplay).Disabled().Class("form-control").ShowValidationMessage(true)
                        @Html.HiddenFor(m => m.Booking.PaymentStatus)
                    }
                    @Html.Bootstrap().LabelFor(m => m.Booking.PaymentStatus)
                </div>
                <div class="form-group">
                    @if (CurrentUser.HasRole("Finance") || CurrentUser.HasRole("Admin") || CurrentUser.HasRole("Manager"))
                    {
                        @Html.Bootstrap().DropDownListFor(m => m.Booking.AttendanceStatus, EnumerationHelper.ToSelectList<AttendanceStatus>()).Class("form-control").ShowValidationMessage(true)
                    }
                    else
                    {
                        @Html.Bootstrap().TextBoxFor(m => m.Booking.AttendanceStatusDisplay).Disabled().Class("form-control").ShowValidationMessage(true)
                        @Html.HiddenFor(m => m.Booking.AttendanceStatus)
                    }
                    @Html.Bootstrap().LabelFor(m => m.Booking.AttendanceStatus)
                </div>
                <div class="form-group">
                    @Html.HiddenFor(m => m.Booking.LetterOfUnderstaking)
                    @if (!string.IsNullOrEmpty(Model.Booking.ProofOfPayment))
                    {
                        @Html.Bootstrap().Link(Model.Booking.ProofOfPayment, FileUpload.GetImageUrl(FileUploadType.Booking, Model.Booking.ProofOfPayment)).Class("form-control").HtmlAttributes(new { target = "_blank" })
                    }
                    @Html.Bootstrap().FileFor(m => m.ProofOfPaymentFile).ShowValidationMessage(false).HtmlAttributes(new { @style = "margin-top: 15px" })
                    @Html.Bootstrap().LabelFor(m => m.Booking.ProofOfPayment)
                </div>
                <div class="form-group">
                    @Html.HiddenFor(m => m.Booking.LetterOfUnderstaking)
                    @if (!string.IsNullOrEmpty(Model.Booking.LetterOfUnderstaking))
                    {
                        @Html.Bootstrap().Link(Model.Booking.LetterOfUnderstaking, FileUpload.GetImageUrl(FileUploadType.Booking, Model.Booking.LetterOfUnderstaking)).Class("form-control").HtmlAttributes(new { target = "_blank" })
                    }
                    @Html.Bootstrap().FileFor(m => m.LetterOfUnderstakingFile).ShowValidationMessage(false).HtmlAttributes(new { @style = "margin-top: 15px" })
                    @Html.Bootstrap().LabelFor(m => m.Booking.LetterOfUnderstaking)
                </div>
                <div class="form-group">
                    @Html.Bootstrap().TextAreaFor(m => m.Booking.Remarks).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.Remarks)
                    @Html.HiddenFor(m => m.Booking.EventID)
                    @Html.HiddenFor(m => m.Booking.SalesmanID)
                    @Html.HiddenFor(m => m.Booking.LeadID)
                </div>
            </div>
        </div>
    </div>

</div>


<div style="display: none">
    <div id="select_form" style="background: white; margin: auto; max-width: 900px; position: relative;">
        <div class="card card-underline">
            <div class="card-head">
                <header>Select Data</header>
            </div><!--end .card-head -->
            <div class="form">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table" id="calltable">
                            <thead>
                                <tr>
                                    <th class="nowrap">Salutation</th>
                                    <th class="nowrap">First Name</th>
                                    <th class="nowrap">Last Name</th>
                                    <th class="nowrap">Designation</th>
                                    <th class="nowrap">Direct Line</th>
                                    <th class="nowrap">Mobile Phone1</th>
                                    <th class="nowrap">Mobile Phone2</th>
                                    <th class="nowrap">Mobile Phone3</th>
                                    <th class="nowrap">Work Email</th>
                                    <th class="nowrap">Personal Email</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div><!--end .card-body -->
            </div>
            <div class="card-actionbar">
                <div class="card-actionbar-row">
                    @if (CurrentUser.HasPermission("Lead", "StartCallForm") && (Model.Event.ClosingDate == null || Model.Event.ClosingDate >= DateTime.Today))
                    {
                        @Html.Bootstrap().ActionLinkButton("Add New", "StartCallForm", "Lead").Id("btn_add_new_call").RouteValues(new { id = Model.Event.ID }).HtmlAttributes(new { @target = "_blank" }).Style(ButtonStyle.Success).PrependIcon("md md-add")
                    }
                </div>
            </div>
        </div><!--end .card -->
    </div>
</div>
@Html.Script(
    @<script>
        var sub = {
            //addNewModule: function () {
            //    this._addNew('#sub-tmpl');
            //    return false;
            //},

            //_addNew: function (templateID) {
            //    $(templateID).tmpl({ index: this._generateGuid() }).appendTo('#delegateContain');
            //    ReValidateForm();
            //},
            remove: function (sender) {
                $(sender).closest('.delegateItem').remove();
            },

            _generateGuid: function () {
                // Source: http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/105074#105074
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            }
        };

        $(document).on('change',
            '@Html.JquerySelectorFor(m=>m.Booking.SameAsSender)',
            function() {
                if ($(this).is(':checked')) {
                    $("#Booking_AuthoriserName").val($("#Booking_SenderName").val());
                    $("#Booking_AuthoriserDestination").val($("#Booking_SenderDestination").val());
                    $("#Booking_AuthoriserMail").val($("#Booking_SenderMail").val());
                    $("#Booking_AuthoriserTel").val($("#Booking_SenderTel").val());
                } else {
                    $("#Booking_AuthoriserName").val('');
                    $("#Booking_AuthoriserDestination").val('');
                    $("#Booking_AuthoriserMail").val('');
                    $("#Booking_AuthoriserTel").val('');
                }
            });

    var callResourceTable = $("#calltable");
        callResourceTable.dataTable({
             "processing": true, // for show progress bar
             "serverSide": true, // for process server side
             "filter": true, // this is for disable filter (search box)
             "orderMulti": false, // for disable multiple column at once
             "stateSave": false,
             "ajax": {
                 "url": "@Url.Action("AjaxGetMyCallList","Booking")",
                 "type": "POST",
                 "datatype": "json",
                 "data": function(d) {
                     d.Name = $('#calltable_filter').find('input[name="search_name"]').val();
                     d.Designation = $('#calltable_filter').find('input[name="search_designation"]').val();
                     d.Email = $('#calltable_filter').find('input[name="search_email"]').val();
                     d.Mobile = $('#calltable_filter').find('input[name="search_mobile"]').val();
                 }
             },
             "columns": [
                 { "data": "Salutation", "name": "Salutation", "orderable": true },
                 { "data": "FirstName", "name": "FirstName", "orderable": true },
                 { "data": "LastName", "name": "LastName", "orderable": true },
                 { "data": "JobTitle", "name": "JobTitle", "orderable": true },
                 { "data": "DirectLine", "name": "DirectLine", "orderable": true },
                 { "data": "MobilePhone1", "name": "MobilePhone1", "orderable": true },
                 { "data": "MobilePhone2", "name": "MobilePhone2", "orderable": true },
                 { "data": "MobilePhone3", "name": "MobilePhone3", "orderable": true },
                 { "data": "WorkEmail", "name": "WorkEmail", "orderable": true },
                 { "data": "PersonalEmail", "name": "PersonalEmail", "orderable": true },
             ],
             "iDisplayLength": 25,
             "aaSorting": [[0, "asc"]],
             "fnRowCallback": function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                 $(nRow).attr('data-id', aData["ID"]);
                 $(nRow).attr('data-salutation', aData["Salutation"]);
                 $(nRow).attr('data-firstname', aData["FirstName"]);
                 $(nRow).attr('data-lastname', aData["LastName"]);
                 $(nRow).attr('data-jobtitle', aData["JobTitle"]);
                 $(nRow).attr('data-directline', aData["DirectLine"]);
                 $(nRow).attr('data-mobilephone1', aData["MobilePhone1"]);
                 $(nRow).attr('data-mobilephone2', aData["MobilePhone2"]);
                 $(nRow).attr('data-mobilephone3', aData["MobilePhone3"]);
                 $(nRow).attr('data-workemail', aData["WorkEmail"]);
                 $(nRow).attr('data-personalemail', aData["PersonalEmail"]);
                 $(nRow).find('td:eq(0)').addClass('nowrap');
             },
             initComplete: function() {
                 var _table = this;
                 var filter_box = _table.parent().find("#calltable_filter");
                 var htmlFilter = '<label>Name:<input type="search" name="search_name" /></label>';
                 htmlFilter += '<label>Designation:<input type="search" name="search_designation" /></label>';
                 htmlFilter += '<label>Email:<input type="search" name="search_email" /></label>';
                 htmlFilter += '<label>Mobile:<input type="search" name="search_mobile" /></label>';
                 filter_box.html(htmlFilter);
                 searchBindingKeyUp(_table.parent().find('input[type="search"]'), _table);
             },
        });
        function searchBindingKeyUp(elementSearch, tableElement) {
            elementSearch.unbind();
            var timeOutTyping;
            elementSearch.bind('keyup',
                function (e) {
                    clearTimeout(timeOutTyping);
                    timeOutTyping = setTimeout(function () {
                        tableElement.fnFilter(elementSearch.eq(0).val());
                    },
                        600);
                });
        }

        var typefill = "";
        $("#btn_authorisation").on("click",
            function (e) {
                e.preventDefault();
                if (typefill != "authorisation") {
                    typefill = "authorisation";
                    reloadSelectData();
                }
                $.magnificPopup.open({
                    items: [
                        {
                            src: '#select_form',
                            type: 'inline'
                        }
                    ],
                    showCloseBtn: true,
                });
            });
        $("#btn_sender").on("click",
            function (e) {
                e.preventDefault();
                if (typefill != "sender") {
                    typefill = "sender";
                    reloadSelectData();
                }
                $.magnificPopup.open({
                    items: [
                        {
                            src: '#select_form',
                            type: 'inline'
                        }
                    ],
                    showCloseBtn: true,
                });
            });
        $("#btn_add_delegate").on("click",
            function (e) {
                e.preventDefault();
                if (typefill != "delegate") {
                    typefill = "delegate";
                    reloadSelectData();
                }
                $.magnificPopup.open({
                    items: [
                        {
                            src: '#select_form',
                            type: 'inline'
                        }
                    ],
                    showCloseBtn: true,
                });
            });
        $(document).on('click', '#calltable tbody tr', function () {
            $.magnificPopup.close();
            if (typefill == "sender") {
                $("@Html.JquerySelectorFor(m => m.Booking.SenderName)").val($(this).data("name"));
                $("@Html.JquerySelectorFor(m => m.Booking.SenderDestination)").val($(this).data("jobtitle"));
                $("@Html.JquerySelectorFor(m => m.Booking.SenderMail)").val($(this).data("email"));
                $("@Html.JquerySelectorFor(m => m.Booking.SenderTel)").val($(this).data("mobile1"));
            } else if (typefill == "authorisation") {
                $("@Html.JquerySelectorFor(m => m.Booking.AuthoriserName)").val($(this).data("name"));
                $("@Html.JquerySelectorFor(m => m.Booking.AuthoriserDestination)").val($(this).data("jobtitle"));
                $("@Html.JquerySelectorFor(m => m.Booking.AuthoriserMail)").val($(this).data("email"));
                $("@Html.JquerySelectorFor(m => m.Booking.AuthoriserTel)").val($(this).data("mobile1"));
            } else if (typefill == "delegate") {
                var guid = sub._generateGuid();
                $('#sub-tmpl').tmpl({ index: guid }).appendTo('#delegateContain');
                ReValidateForm();
                $("#Booking_Delegates_" + guid + "__LeadID").val($(this).data("id"));
                $("#Booking_Delegates_" + guid + "__Salutation").val($(this).data("salutation").toUpperCase()).trigger("change");
                $("#Booking_Delegates_" + guid + "__FirstName").val($(this).data("firstname"));
                $("#Booking_Delegates_" + guid + "__LastName").val($(this).data("lastname"));
                $("#Booking_Delegates_" + guid + "__JobTitle").val($(this).data("jobtitle"));
                $("#Booking_Delegates_" + guid + "__DirectLine").val($(this).data("directline"));
                $("#Booking_Delegates_" + guid + "__MobilePhone1").val($(this).data("mobilephone1"));
                $("#Booking_Delegates_" + guid + "__MobilePhone2").val($(this).data("mobilephone2"));
                $("#Booking_Delegates_" + guid + "__MobilePhone3").val($(this).data("mobilephone3"));
                $("#Booking_Delegates_" + guid + "__WorkEmail").val($(this).data("workemail"));
                $("#Booking_Delegates_" + guid + "__PersonalEmail").val($(this).data("personalemail"));
            }
        });
        var isReloadSelectData = false;
        $("#btn_add_new_call").on("click",
            function() {
                isReloadSelectData = true;
            });

        $(window).focus(function () {
            if (isReloadSelectData) {
                reloadSelectData();
            }
        });
        function reloadSelectData() {
            $('#calltable_filter').find('input[name="search_name"]').val('');
            $('#calltable_filter').find('input[name="search_designation"]').val('');
            $('#calltable_filter').find('input[name="search_email"]').val('');
            $('#calltable_filter').find('input[name="search_mobile"]').val('');
            isReloadSelectData = false;
            callResourceTable.fnFilter('');
        }
    </script>
    )