@using System.Web.Script.Serialization
@using NS.Mvc
@using PQT.Domain.Abstract
@using PQT.Domain.Enum
@using Resources
@model PQT.Web.Models.InvoiceModel
<style>
    .nowrap {
        white-space: nowrap;
    }

    #calltable tbody tr {
        cursor: pointer;
    }

        #calltable tbody tr:hover {
            background-color: #f2f2f2;
        }
</style>
@Html.HiddenFor(m => m.Invoice.BookingID)
<div class="card-body">
    <div class="card card-underline">
        <div class="card-head">
            <header>Attention to</header>
        </div>
        <div class="card-body text-default-light">
            <div class="form-group">
                @Html.Bootstrap().TextBoxFor(m => m.Booking.AuthoriserName).Disabled().Class("form-control text-capitalize").HtmlAttributes(new { required = "required" }).ShowValidationMessage(true)
                @Html.Bootstrap().LabelFor(m => m.Booking.AuthoriserName).LabelText("Authoriser Name")
            </div>
            <div class="form-group">
                @Html.Bootstrap().TextBoxFor(m => m.Booking.Company.CompanyName).Class("form-control").Disabled().ShowValidationMessage(true)
                @Html.Bootstrap().LabelFor(m => m.Booking.CompanyID).ShowRequiredStar(false).LabelText("Company Name")
            </div>
            <div class="form-group">
                @Html.Bootstrap().TextBoxFor(m => m.Booking.Address).Class("form-control").Disabled().ShowValidationMessage(true)
                @Html.Bootstrap().LabelFor(m => m.Booking.Address).LabelText("Company Address")
            </div>
        </div>
    </div>
    <div class="card card-underline">
        <div class="card-head">
            <header>Invoice Info</header>
        </div>
        <div class="card-body text-default-light">
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Invoice.InvoiceNo).Class("form-control code").HtmlAttributes(new { required = "required" }).ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Invoice.InvoiceNo).ShowRequiredStar(true)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.DatePickerFor(m => m.Invoice.CreatedTime, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(m => m.Invoice.CreatedTime)
                    @Html.Bootstrap().LabelFor(m => m.Invoice.InvoiceDate).ShowRequiredStar(true)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.BookingDateStr).Class("form-control").Disabled().ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.BookingDate).ShowRequiredStar(false)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.DelegateNumber).Class("form-control").Disabled().ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.DelegateNumber).LabelText("Attendee(s)").ShowRequiredStar(false)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.Event.EventName).Class("form-control").Disabled().ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.Event.EventName).LabelText("Program").ShowRequiredStar(false)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.Event.EventDate).Class("form-control").Disabled().ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.Event.EndDate).LabelText("Date").ShowRequiredStar(false)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Booking.Event.HotelVenue).Class("form-control").Disabled().ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Booking.Event.HotelVenue).LabelText("Venue")
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Bootstrap().DropDownListFor(m => m.Invoice.Currency, EnumerationHelper.ToSelectList<SalaryCurrency>()).OptionLabel("").Class("form-control").HtmlAttributes(new { required = "required" }).ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Invoice.Currency).ShowRequiredStar(true)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Invoice.AdminCharge).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Invoice.AdminCharge)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Bootstrap().TextBoxFor(m => m.Invoice.TotalAmount).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Invoice.TotalAmount)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Bootstrap().DropDownListFor(m => m.Invoice.BankAccountID, Model.BankAccounts.Where(m => m.ID == Model.Invoice.BankAccountID).ToSelectList(m => m.ID, m => m.BankNameDescription)).Class("form-control").HtmlAttributes(new { required = "required" }).ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Invoice.BankAccountID).LabelText("Bank Account").ShowRequiredStar(true)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group ">
                    @Html.Bootstrap().TextBoxFor(m => m.Invoice.ChequePayableTo).Id("chequePayableTo").HtmlAttributes(new { autocomplete = "off" }).Class("form-control code").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Invoice.ChequePayableTo)
                </div>
            </div>
            <div class="col-sm-12">
                <div class="form-group ">
                    @Html.Bootstrap().TextAreaFor(m => m.Invoice.Remarks).Rows(5).Class("form-control").ShowValidationMessage(true)
                    @Html.Bootstrap().LabelFor(m => m.Invoice.Remarks)
                </div>
            </div>
        </div>
    </div>
    <div class="card card-underline">
        <div class="card-head">
            <header>Delegates</header>
        </div>
        <div class="card-body">
            <div class="row">
                <table class="table no-margin">
                    <thead>
                        <tr>
                            <th>S/No</th>
                            <th>Full Name</th>
                            <th>Job Title</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (var phonecall in Model.Booking.Delegates)
                            {
                                <tr>
                                    <td>@phonecall.Order</td>
                                    <td>@phonecall.FullName</td>
                                    <td>@phonecall.JobTitle</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div><!--end .card-body -->
    </div>
</div>
@Html.Script(
    @<script>
        var bankAccounts = @Html.Serialize(Model.BankAccounts);
        var $bankAccount = $('@Html.JquerySelectorFor(m=>m.Invoice.BankAccountID)');
        $('@Html.JquerySelectorFor(m=>m.Invoice.Currency)').on('change',
            function() {
                var val = $(this).val();
                $bankAccount.empty();
                $bankAccount.append('<option value=""></option>');
                for (var i = 0; i < bankAccounts.length; i++) {
                    if (bankAccounts[i].CurrencyCode == val) {
                        $bankAccount.append('<option value="' + bankAccounts[i].ID + '">' + bankAccounts[i].BankNameDescription +'</option>');
                    }
                }
                $bankAccount.val('').trigger("change");
            });


        var lstGroups = @Html.Serialize(Model.BankAccounts.Select(m=>m.AccountHolderName));
        autocomplete(document.getElementById("chequePayableTo"), lstGroups);
        function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }
    </script>)